The ``7-base_geometry`` module
======================

Using Class ``BaseGeometry``
-------------------

This is a Class Test in reStructuredText format.  First import
``BaseGeometry`` from the ``7-base_geometry`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now test it:
Test1 : create new object from BaseGeometry

    >>> bg = BaseGeometry()

Test2 : correct inputs + empty string name

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("", 89)

Test2 : call method without args

    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test3 : call method with missing argument

    >>> bg.integer_validator("width", )
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Test3 : check type value 

    >>> bg.integer_validator("width", True)
    Traceback (most recent call last):
        ...
    TypeError: width must be an integer

Test4 : check that value greater then 0 

    >>> bg.integer_validator("width", 0)
    Traceback (most recent call last):
        ...
    ValueError: width must be greater than 0
    >>> bg.integer_validator("width", -5)
    Traceback (most recent call last):
        ...
    ValueError: width must be greater than 0

Test5 : test area method and pass some args to it

    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented
    >>> bg.area(3)
    Traceback (most recent call last):
        ...
    TypeError: area() takes 1 positional argument but 2 were given
    >>> bg.area(3, 4)
    Traceback (most recent call last):
        ...
    TypeError: area() takes 1 positional argument but 3 were given
